#include "C:\Users\Anastasia\OneDrive\Рабочий стол\BMSTU\infa2\ConsoleApplication200\ConsoleApplication200\Header.h"

struct library       
{
    unsigned long long int ISBN;
    char Author[size]; 
    char booktitle[size]; 
    int total; 
    int available; 
};

struct library books[MAX];

struct student            
{
    char zachet_book[8]; 
    char name[15]; 
    char lastname[15]; 
    char f_name[20]; 
    char facult[5];  
    char prof[MAX]; 
};

struct student student[MAX];

struct user            
{ 
    char login[20]; 
    char password[20]; 
    int student;
    int book; 
};
struct user user[MAX];

void add_book();   
void del_book();    
void give_book();   
void take_book();  

void add_student();    
void del_student();    
void backup_student();     
void restore_student();    
void find_student();        

void open();               

int AStude=0;   
int ABoks=0;    
int Ausrs=0;    


int main()
{
    SetConsoleCP(1251);              
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    open();                            

    int stp;
    char login[20];
    char password[20];
    printf("login:");       
    scanf("%s",login);
    printf("password:");    
    scanf("%s", password);
    
    for (int i = 0; i < Ausrs; i++)          
    {
        if ((strcmp(login, user[i].login) == 0) && (strcmp(password, user[i].password) == 0))
        {
            stp = i;
            break;
        }
    }
    int users = -1;     

    if ((user[stp].student == 1) && (user[stp].book == 1))      
    {
        printf(">student menu \n>book menu \n");
        scanf("%d", &users);
    }

    int u = 0;

    if ((users == 1) || ((user[stp].student == 1) && (user[stp].book == 0)))       
    {
        printf("\n>Add_student \n>Del_student \n>Backup_student \n>Restore_student \n>Find_student \n>Exit \n");
        for (;;)
        {
            scanf("%d", &u);                                            
            if (u == 1)
                add_student();
            else if (u == 2)
                del_student();
            else if (u == 3)
                backup_student();
            else if (u == 4)
                restore_student();
            else if (u == 5)
                find_student();
            else if (u == 6)
                break;
            else 
                printf("Неверный ввод!\n");
        }
    }
        if ((users == 2) || ((user[stp].student == 0) && (user[stp].book == 1)))            // соответсвенно вывод меню книг
        {
            printf("\n>Add_book \n>Delete book \n>Give_book \n>Take_book \n>Exit \n");
            for (;;)
            {
                scanf("%d", &u);    // БАААГГ если в меню книг ввести букву будет вечный цикл
                if (u == 1)
                    add_book();
                else if (u == 2)
                    del_book();
                else if (u == 3)
                    give_book();
                else if (u == 4)
                    take_book();
                else if (u == 5)
                    break;
                else {
                    printf("Неверный ввод!\n");     
                                                    
                }
            }
    }
    
    return 0;
}

void open()
{
    FILE* file;     
    int i;

    if ((file = fopen("students.csv", "r")) == 0)           
    {
        printf("Не могу открыть students.csv!");
        exit(300);
    }
    for (i=0; !feof(file); i++)                       
    {
        fscanf(file, "%[^;]%*c", student[i].zachet_book);
        fscanf(file, "%[^;]%*c", student[i].lastname);
        fscanf(file, "%[^;]%*c", student[i].name);
        fscanf(file, "%[^;]%*c", student[i].f_name);
        fscanf(file, "%[^;]%*c", student[i].facult);
        fscanf(file, "%[^'\n']%*c", student[i].prof);
    }
    fclose(file);
    AStude = i;             
        
    if ((file = fopen("books.csv", "r")) == 0)            
    {
        printf("Не могу открыть books.csv");
        exit(100);
    }
    for (i = 0; !feof(file); i++)
    {
        fscanf(file, "%lld", &books[i].ISBN);
        getc(file);
        fscanf(file, "%[^;]%*c", books[i].Author);
        fscanf(file, "%[^;]%*c", books[i].booktitle);
        fscanf(file, "%d", &books[i].total);
        getc(file);
        fscanf(file, "%d", &books[i].available);
        getc(file);
    }
    fclose(file);
    ABoks = i;             

    if ((file = fopen("users.csv", "r")) == 0)             
    {
        printf("Не могу открыть users.csv!");
        exit(500);
    }
    for (i = 0; !feof(file); i++)
    {
        fscanf(file, "%[^;]%*c", user[i].login);
        fscanf(file, "%[^;]%*c", user[i].password);
        fscanf(file, "%d", &user[i].student);
        getc(file);
        fscanf(file, "%d", &user[i].book);
        getc(file);
    }
    fclose(file);
    Ausrs = i;             
}


void add_book()                 
{
    open();                             
                                        
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    unsigned long long int ISBN;
    char author[size]; 
    char booktitle[size];
    int total;
    int available;
    
    FILE* file;
    if ((file = fopen("books.csv", "a")) == 0)         
    {
        printf("Не могу открыть books.csv!");
        exit(101);
    }

    printf("ISBN книги для добавления: ");
    scanf("%lld", &ISBN);

    for (int i = 0; i < ABoks; i++)
    {
        if (ISBN == books[i].ISBN)
        {
            printf("Такая книга уже сущетсвует");
            exit(200);
        }
    }

    printf("Автор: ");   
    scanf("%s", author);
    printf("Название: ");

    char c = getchar();                     
    int n = 0;                                 

    while ((c = getchar()) != '\n')
    {
        booktitle[n] = c; 
        n++;
    }
    booktitle[n] = '\0';

    printf("Всего книг: ");     
    scanf("%d", &total);

    printf("Доступно: ");     
    scanf("%d", &available);

    fprintf(file, "\n%lld;", ISBN);             
    fprintf(file, "%s;", author);
    fprintf(file, "%s;", booktitle);
    fprintf(file, "%d;", total);
    fprintf(file, "%d", available);

    fclose(file);
    printf("\nДобавлено\n");

}

//Удалить книгу по номеру ISBN

void del_book()
{
    open();
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");
    unsigned long long int ISBN;

    FILE* file;
    if ((file = fopen("books.csv", "r")) == 0)
    {
        printf("Не могу открыть books.csv");
        exit(102);
    }

    char* buf = (char*)malloc((ABoks+1)*(sizeof(struct library)));          
    
    printf("ISBN книги для удаления: ");
    scanf("%lld", &ISBN);

    int n = 0;
    for (int i = 0; i < ABoks ; i++)                        
    {
        if (ISBN != books[i].ISBN)                                  
        {                                                            
            buf[n] = getc(file);
            for (;(buf[n] != '\n') && (!feof(file));)
            {
                n++;
                buf[n] = getc(file);
            }
            buf[n] = '\n';
            n++;
        }
        if (ISBN == books[i].ISBN)                          
        {
            for (;(getc(file) != '\n') && (!feof(file));)              
            {;}
        }
    }
    buf[n - 1] = '\0';
    fclose(file);

    file = fopen("books.csv", "w");                 

    for (int e = 0; buf[e] != '\0'; e++)
        fprintf(file, "%c", buf[e]);
    fclose(file);
    free(buf);                              
    printf("Удалено!\n");
}


void give_book()
{
    open();

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    unsigned long long int ISBN;

    FILE* file;
    if ((file = fopen("books.csv", "r")) == 0)
    {
        printf("Не могу открыть books.csv!");
        exit(103);
    }

    printf("ISBN книги для выдачи: ");
    scanf("%lld", &ISBN);

    bool t = false;                       
    int i;
    for (i=0; i < ABoks; i++)
    {
        if ((ISBN == books[i].ISBN) && (books[i].available > 0))
        {
            books[i].available = books[i].available - 1;               
            t = true;
        }
    }
    fclose(file);

    if (t == true)                               
    {
        file = fopen("books.csv", "w");
        for (int c = 0; c < ABoks; c++)
        {
            fprintf(file, "%lld;", books[c].ISBN);
            fprintf(file, "%s;", books[c].Author);
            fprintf(file, "%s;", books[c].booktitle);
            fprintf(file, "%d;", books[c].total);
            if (c == (ABoks - 1))
            fprintf(file, "%d", books[c].available);
            else 
            fprintf(file, "%d\n", books[c].available);
        }
        printf("Книга выдана\n");
        fclose(file);
    }
    else printf("Недостаточно книг или неверный ISBN!\n");
}



void take_book()
{
    open();
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");
    unsigned long long int ISBN;

    FILE* file;
    if ((file = fopen("books.csv", "r")) == 0)
    {
        printf("Не могу открыть books.csv!");
        exit(104);
    }

    printf("ISBN книги для приема: ");
    scanf("%lld", &ISBN);

    bool t = false;
    int i = 0;
    for (i; i < ABoks; i++)                                   
    {
        if ((ISBN == books[i].ISBN) && (books[i].available < books[i].total))
        {
            books[i].available = books[i].available + 1;
            t = true;
        }
    }
    fclose(file);

    if (t == true)                                           
    {                                                   
        file = fopen("books.csv", "w");
        for (int c = 0; c < ABoks; c++)
        {
            fprintf(file, "%lld;", books[c].ISBN);
            fprintf(file, "%s;", books[c].Author);
            fprintf(file, "%s;", books[c].booktitle);
            fprintf(file, "%d;", books[c].total);
            if (c == (ABoks - 1))
                fprintf(file, "%d", books[c].available);
            else
                fprintf(file, "%d\n", books[c].available);
        }
        printf("Книга возвращена\n");
        fclose(file);
    }
    else printf("Слишком мало книг или неверный ISBN!");
}


void add_student()
{
    open();
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    char zachet_book[8];
    char name[15];
    char lastname[15];
    char f_name[20];
    char faculty[5];
    char prof[size];

    FILE* file;
    if ((file = fopen("students.csv", "a")) == 0)                          
    {
        printf("Не могу открыть students.csv!");
        exit(301);
    }
    printf("Зачетная книжка для добавления: ");
    scanf("%s", zachet_book);

    for (int n = 0; n <= AStude; n++)
    {
        if (strcmp(zachet_book, student[n].zachet_book) == 0)
        {
            printf("Такой студент уже сущетсвует!");
            exit(400);
        }
    }

    printf("Фамилия: "); 
    scanf("%s", lastname);

    printf("Имя: ");  
    scanf("%s", name);
    
    printf("Отчество: "); 
    scanf("%s", f_name);
    
    printf("факультет: "); 
    scanf("%s", faculty);
    
    printf("Направление: ");
    int n = 0;
    char c = getchar();
    while ((c = getchar()) != '\n')
    {
        prof[n] = c; n++;
    }
    prof[n] = '\0';

    fprintf(file, "\n%s;", zachet_book);
    fprintf(file, "%s;", lastname);
    fprintf(file, "%s;", name);
    fprintf(file, "%s;", f_name);
    fprintf(file, "%s;", faculty);
    fprintf(file, "%s", prof);

    fclose(file);

    printf("Добавлено\n");
}



void del_student()
{
    open();

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    char zachet_book[8];
     
    FILE* file;
    if ((file = fopen("students.csv", "r")) == 0)
    {
        printf("Не могу открыть students.csv");
        exit(302);
    }
    printf("Зачетная книжка для удаления: ");
    
    scanf("%s", zachet_book);

    char* buf = (char*)malloc((AStude+1)*(sizeof(struct student)));
    int n = 0;

    for (int i = 0; i < AStude; i++)
    {
        if (strcmp(zachet_book, student[i].zachet_book) != 0)                     
        {
            buf[n] = getc(file);
            while ((buf[n] != '\n') && (!feof(file)))
            {
                n++;
                buf[n] = getc(file);
            }
            buf[n] = '\n'; 
            n++;
        }
        if (strcmp(zachet_book, student[i].zachet_book) == 0)
        {
            while ((getc(file) != '\n') && (!feof(file)))
            {
                ;
            }
        }
    }
    buf[n - 1] = '\0';
    fclose(file);

    file = fopen("students.csv", "w");

    for (int e = 0; buf[e] != '\0'; e++)
        fprintf(file, "%c", buf[e]);
    
    fclose(file);
    free(buf);
    
    printf("Удалено!\n");
}



void backup_student()
{
    open();
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    int n;
    FILE* file;
    if ((file = fopen("students.csv", "r")) == 0)
    {
        printf("Не могу открыть students.csv!");
        exit(303);
    }
    char* buf = (char*)malloc((AStude+1)*(sizeof(struct student)));

    for (n = 0; !feof(file); n++)           
    {
        buf[n] = getc(file);
    }
    buf[n - 1] = '\0';

    fclose(file);

    struct tm* u;                          
    const time_t timer = time(NULL);        
    u = localtime(&timer);                 

    char array[50];
   
    for (int i = 0; i < 50; i++)
        array[i] = 0;
    
    int len = strftime(array, 50, "%d.%m.%Y %H-%M", u);       

    char f_title[32] = "students";
    int r = 8;
    int i = 0;
    for (r; array[i] != '\0'; i++,r++)
    {
        f_title[r] = array[i];
    }
    f_title[r] = '.';              
    f_title[r+1] = 'c';
    f_title[r+2] = 's';
    f_title[r+3] = 'v';
    f_title[r+4] = '\0';

    file = fopen(f_title, "w");

    for (int e = 0; (buf[e] != '\0'); e++)
        fprintf(file, "%c", buf[e]);
   
    fclose(file);
    free(buf);

    printf("Точка восстановления %s создана.\n", f_title);
}



void restore_student()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    char backup_name[100];
    int bu = 0;
    
    printf("\nНазвание файла восстановления(studentsXX.XX.XXXX TT-TT.csv): ");
    
    char c = getchar();
    c = getchar();
    while (c != '\n')
    {
        backup_name[bu] = c;
        bu++;
        c = getchar();
    }
    backup_name[bu] = '\0';

    FILE* file;
    if ((file = fopen(backup_name, "r")) == 0)
    {
        printf("Не могу открыть students.csv!");
        exit(304);
    }

    char* buf = (char*)malloc((AStude+1)*(sizeof(struct student)));
    int n = 0;

    for (n; !feof(file); n++)                               
    {
        buf[n] = getc(file);
    }
    buf[n - 1] = '\0';

    fclose(file);

    file = fopen("students.csv", "w");
    for (int e = 0; (buf[e] != '\0'); e++)
        fprintf(file, "%c", buf[e]);

    fclose(file);
    free(buf);

    printf("Файл students.csv восстановлен!\n");
}



void find_student()
{
    open();
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    setlocale(LC_ALL, "Russian");

    char lastname[15];

    printf("Фамилия: ");
    scanf("%s", lastname);
    bool t = false;

    for (int i = 0;i < AStude; i++)
    {
        if (strcmp(lastname, student[i].lastname) == 0)                        
        {
            t = true;
            printf("Зачетка %s \t ", student[i].zachet_book);
            printf("Фамилия: %s \t", student[i].lastname);
            printf("Имя: %s \t", student[i].name);
            printf("Отчество: %s \t", student[i].f_name);
            printf("Факультет: %s\t", student[i].facult);
            printf("Направление: %s\n", student[i].prof);
        }
    }
    if (t == false)                                                    
    printf("Cтудент не найден!\n");
}
